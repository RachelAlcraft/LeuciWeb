
@{
    ViewData["Title"] = "Matrix";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<h2>Superposition of Electron Density</h2>
<p>
    Across multiple structures
</p>
<hr />
<div>
    
    </p>@Html.Raw(ViewBag.Error)<p>
</div>
<div>
    <div>
        
        @using (Html.BeginForm("Index", "Super", FormMethod.Post))
        {
        <div style="float:left;width:70%">
            <h4>Motif Match Settings</h4>
            <input style="display:none;visibility:collapse;" id="update" value='N' name="update" />            
            <table>
                <tr>
                    <th style="width:30%">Pdb codes (comma delim)</th>
                    <td><input type="text" id="motif" name="pdbcodes" value=@ViewBag.PdbCodes style="height:30px;text-align:left;background-color:palegoldenrod" /></td>                    
                </tr>
                <tr>
                    <th style="width:30%">Motif (see help)</th>                    
                    <td><input type="text" id="motif" name="motif" value=@ViewBag.Motif style="height:30px;text-align:left;background-color:palegoldenrod" /></td>
                </tr>
                <tr>
                    <th>Exclusions (see help)</th>
                    <td><input type="text" id="exclusions" name="exclusions" value=@ViewBag.Exclusions style="height:30px;text-align:left;background-color:palegoldenrod" /></td>
                </tr>
                <tr>
                    <th>Inclusions (see help)</th>
                    <td><input type="text" id="inclusions" name="inclusions" value=@ViewBag.Inclusions style="height:30px;text-align:left;background-color:palegoldenrod" /></td>
                </tr>
            </table>
            <input type="submit" value="find motif matches" onclick="changeUpdate('Y')" />
        </div>
            <div style="float:left;width:30%">
                <h4>Superposition Settings</h4>
                <table>
                    <tr>
                        <th>Width(Å)</th>
                        <td><input type="text" id="width" name="width" value=@ViewBag.Width style="height:30px;" /></td>
                    </tr>
                    <tr>
                        <th>Samples</th>
                        <td><input type="text" id="samples" name="samples" value=@ViewBag.Samples style="height:30px;" /></td>
                    </tr>
                    <tr>
                        <th>Fos</th>
                        <td><input type="text" id="fos" name="fos" value=@ViewBag.Fos style="height:30px;" /></td>
                    </tr>
                    <tr>
                        <th>Fcs</th>
                        <td><input type="text" id="fcs" name="fcs" value=@ViewBag.Fcs style="height:30px;" /></td>
                    </tr>
                    <tr>
                        <th>Interp</th>
                        <td><input type="text" id="interp" name="interp" value=@ViewBag.Interp style="height:30px;" /></td>
                    </tr>
                </table>
                <input type="submit" value="Create overlay" onclick="changeUpdate('YC')" />
            </div>
             <hr style="clear:both"/>           
            <div style="">
            <div id="detls" style="max-height:350px;overflow:auto;margin-top:20px;">
            <table>
                <tr>
                    <th style="border:none">PdbCode</th>
                    <th style="border:none">Line</th>
                    <th style="border:none">Distance</th>
                    <th style="border:none">Key</th>
                </tr>
                <tr>
                    <td colspan="4" style="background-color:silver;border:none"></td>
                </tr>

            @foreach (var item in @ViewBag.SingleMatches)
            {
            @foreach (var itm in @item.singleMatches)
            {
                <tr>                    
                    <th style="border:none">@itm.pdbcode</th>
                    <td style="border:none">@itm.line</td>
                    <td style="border:none">@itm.distance</td>
                    <td style="border:none">@itm.key</td>                    
                </tr>
            }
                <tr>
                    <td colspan="4" style="background-color:silver;border:none"></td>
                </tr>
            }
            </table>
        </div>
        </div>
        <br/>
        <hr style="clear:both"/>                
        
        
    }
    </div>
</div>

<h3>Density Overlays</h3>
<table>
    <tr>        
        <td style="width:10%;background:LightCyan;">Floor%=<span><input style="width:50px" type="text" id="sdfloor" name="sdfloor" value=100></span></td>
        <td style="width:40%;background:LightCyan;"><input type="range" min=0 max=100 value=100 step="1" style="direction:ltr" id="rangeValueMin"></td>
        <td style="width:40%;background:LightCyan;"><input type="range" min=0 max=100 value=100 step="1" style="direction:ltr" id="rangeValueMax"></td>
        <td style="width:10%;background:LightCyan;">Cap%=<span><input style="width:50px" type="text" id="sdcap" name="sdcap" value=100></span></td>
    </tr>
</table>
<table>
    <tr>
        <td colspan="3">
            <table cellpadding="0" cellspacing="0" style="width:100%;table-layout:fixed;border:none;">
                <tr>
                    <td>
                        <table>
                        <tr>
                            <th style="border:none;background-color:snow;">
                                <input type="submit" value="Toggle Plot" id="tp" onclick="togglePlot('density')" style="border:none;background-color:snow;" />                                                
                            </th>
                                <td style="border:none;background-color:snow;">
                                    <input style="border:none;background-color:snow;color:dimgray" id="plot" value='heatmap' name="plot" />
                            </td>
                        </tr>
                        </table>                                        
                     </td>
                     <td>
                        <table>
                        <tr>
                            <th style="border:none;background-color:snow;">
                                <input type="submit" value="Toggle Hue" id="th" onclick="toggleHue('density')" style="border:none;background-color:snow;" />                        
                            </th>
                            <td style="border:none;background-color:snow;">
                                    <input style="border:none;background-color:snow;color:dimgray" id="hue" value='Best' name="hue" />
                            </td>
                        </tr>
                        </table>
                    </td>
                    <td>
                        <table>
                        <tr>
                            <th style="border:none;background-color:snow;">
                                <input type="submit" value="Toggle Bar" id="tb" onclick="toggleBar()" style="border:none;background-color:snow;" />                        
                            </th>      
                            <td style="border:none;background-color:snow;">
                                    <input style="border:none;background-color:snow;color:dimgray" id="cbar" value='N' name="cbar" />
                            </td>                    
                        </tr>
                        </table>
                     </td>
                </tr>                
            </table>
        </td>
    </tr>
    <tr>
        <th>Density</th>
        <th>Radient</th>
        <th>Laplacian</th>
    </tr>    
    <tr>
        <td style="width: 450px;">            
            <div id="SuperPositionDEN" style="width:100%"></div>
        </td>
        <td style="width: 450px;">            
            <div id="SuperPositionRAD" style="width:100%"></div>
        </td>
        <td style="width: 450px;">            
            <div id="SuperPositionLAP" style="width:100%"></div>
        </td>                
    </tr>      
</table>
   


<hr/>
<h3>Single Positions</h3>
<table style="border:none;background-color:snow;">
    <tr style="border:none;background-color:snow;">
        <th style="border:none;background-color:snow;width:350px"><input type="submit" value="Expand/Collapse each sample" id="tb" onclick="toggleSingles()" style="border:none;background-color:snow;" /></th>
        <td style="border:none;background-color:snow;"><input style="border:none;background-color:snow;color:dimgray" id="singles" value='collapsed' name="singles" /></td>
    </tr>
</table>  
<table>
    <tr>        
        <th style="width: 450px;">Density</th>
        <th style="width: 450px;">Radient</th>
        <th style="width: 450px;">Laplacian</th>
    </tr>
    
    @foreach (var item in @ViewBag.SinglePositions)
    {
    <tr>
        <td colspan="3">
                <table style="border:none">
                    <tr><th colspan="3" style="border:none">@item.description</th></tr>
            <tr>            
            <td style="width: 450px;">
                <div id=@item.contourDen style="width:100%"></div>                
            </td>
            <td style="width: 450px;">            
                <div id=@item.contourRad style="width:100%"></div>
            </td>
            <td style="width: 450px;">            
                <div id=@item.contourLap style="width:100%"></div>
            </td>                
            </tr>
            </table>
        </td>
    </tr>
    }
</table>

<hr/>

<script>    
    function makePlot(dfloor,dcap,cbar,hue,plot,superpos){        
        hueL = hue
        hueR = hue
        if (hue == "Best"){
            hue = "RedBlueGrey";
            hueR = "BlackWhite";
            hueL = "RedBlue";
        }

        //var superpos = @Html.Raw(Json.Serialize(@ViewBag.SuperPosition));        
        var jx = superpos["xAxis"];
        var jy = superpos["yAxis"];
        var jd = superpos["densityMatrix"];
        var jr = superpos["radientMatrix"];
        var jl = superpos["laplacianMatrix"];
        var minv = superpos["minD"];
        var maxv = superpos["maxD"];
        var minl = superpos["minL"];
        var maxl = superpos["maxL"];
        var contournameden = superpos["contourDen"];
        var contournamerad = superpos["contourRad"];
        var contournamelap = superpos["contourLap"];
                                
        if (dfloor != -1){
            minv = minv * dfloor / 100;
        }
        if (dcap != -1){
            maxv = maxv * dcap/100;
        }

        var size = (maxv - minv) / 10;
        var zero_frac = 0.001;
        zero_frac = (0 - minv) / (maxv - minv);

        var sizeL = (maxl - minl) / 10;
        var zero_fracL = 0.001;
        zero_fracL = (0 - minl) / (maxl - minl);
        zero_fracL = 1 - zero_fracL;
        
        col_bar = {
            title: "",
            thickness: 15,
            len: 0.85,
            x: +.95
        }
        //alert(minv)
        //alert(minl)
        
        if (hue == "RedBlueGrey"){
            if (minv < 0) {
                cs_scl = [[0, 'Grey'], [zero_frac, 'Snow'],[zero_frac + 0.01, 'LightBlue'], [zero_frac + 0.2, 'CornflowerBlue'], [0.8, 'Crimson'], [1, 'rgb(100, 0, 0)']];            
            } else {
                cs_scl = [[0, 'AliceBlue'], [0.01, 'LightBlue'], [0.2, 'CornflowerBlue'], [0.8, 'Crimson'], [1, 'rgb(100, 0, 0)']];
            }
        } else if (hue == "RedBlue") {
            cs_scl = [[0, 'CornflowerBlue'], [zero_frac, 'Snow'], [1, 'Crimson']];
        }else{
            cs_scl = [[0, 'Snow'], [1, 'Black']];
        }

        if (hueR == "RedBlueGrey") {            
            cs_sclR = [[0, 'AliceBlue'], [0.01, 'LightBlue'], [0.2, 'CornflowerBlue'], [0.8, 'Crimson'], [1, 'rgb(100, 0, 0)']];
        } else if (hueR == "RedBlue") {
            cs_sclR = [[0, 'CornflowerBlue'], [0.5, 'Snow'],[1, 'Crimson']];                
        } else {
            cs_sclR = [[0, 'Snow'], [1, 'Black']];
        }

        if (hueL == "RedBlueGrey"){
            if (minl < 0) {
                cs_sclL = [[0, 'Grey'], [zero_fracL, 'Snow'],[zero_fracL + 0.01, 'LightBlue'], [zero_fracL + 0.2, 'CornflowerBlue'], [0.8, 'Crimson'], [1, 'rgb(100, 0, 0)']];            
            } else {
                cs_sclL = [[0, 'AliceBlue'], [0.01, 'LightBlue'], [0.2, 'CornflowerBlue'], [0.8, 'Crimson'], [1, 'rgb(100, 0, 0)']];
            }
        } else if (hueL == "RedBlue") {
            cs_sclL = [[0, 'CornflowerBlue'], [zero_fracL, 'Snow'], [1, 'Crimson']];
        }else{
            cs_sclL = [[0, 'Snow'], [1, 'Black']];
        }
    
        // make the crystal heatmaps
    
        var dataDEN = [{x: jx, y: jx, z: jd, type: 
            plot,  
            colorscale: cs_scl, 
            line: { width: 0.5, color: 'Gray' },
            showscale: cbar,
            colorbar: col_bar, 
            name: "XY",
            zmin: minv,
            zmax: maxv,
                        }];
    
        var dataRAD = [{x: jx, y: jx, z: jr, type: 
            plot,  
            colorscale: cs_sclR, 
            line: { width: 0.5, color: 'Gray' },
            showscale: cbar, 
            colorbar: col_bar, 
            name: "YZ",
            //zmin: minv,
            //zmax: maxv,
            }];
    
        var dataLAP = [{ x: jx, y: jx, z: jl, type:             
            plot,
            colorscale: cs_sclL,
            reversescale: true,
            line: { width: 0.5, color: 'Gray' },
            showscale: cbar, 
            colorbar: col_bar, 
            name: "ZX",
            zmin: minl,
            zmax: maxl,
            }];
    
        var layout = {
            grid: { rows: 1, columns: 1, pattern: 'independent' },
            autosize: true,
            title: '',
            showlegend: false,
            xaxis: {showgrid: false,zeroline: false,visible: false,},        
            yaxis: {scaleanchor: 'x',scaleratio: 1,visible: false,},      
            margin: {l: 20,r: 80,b: 20,t: 20,pad: 4},
        };

        var config = {
            responsive: true,
            toImageButtonOptions: { scale: 6, width: 540, height: 540 }
        };

        var dnam = contournameden;
        var rnam = contournamerad;
        var lnam = contournamelap;

        Plotly.newPlot(dnam, dataDEN, layout,config);
        Plotly.newPlot(rnam, dataRAD, layout,config);
        Plotly.newPlot(lnam, dataLAP, layout, config);
        
    }

    function clearPlot(singlepos) {
        var contournameden = singlepos["contourDen"];
        var contournamerad = singlepos["contourRad"];
        var contournamelap = singlepos["contourLap"];
        Plotly.purge(contournameden);
        Plotly.purge(contournamerad);
        Plotly.purge(contournamelap);
    
    }
    
    function makePlots(dfloor, dcap, cbar, hue, plot,singles) {
        
        
        var superpos = @Html.Raw(Json.Serialize(@ViewBag.SuperPosition));                
        makePlot(dfloor, dcap, cbar, hue, plot,superpos);
        
        var singleposes = @Html.Raw(Json.Serialize(@ViewBag.SinglePositions));        
        var arrayLength = singleposes.length;
        for (var i = 0; i < arrayLength; i++) {
            var singlepos = singleposes[i];            
            if (singles){
                makePlot(dfloor, dcap, cbar, hue, plot, singlepos);
            }else{
                clearPlot(singlepos);
            }

        }
        

    }
</script>

<script>
    function changeUpdate(update) {        
        document.getElementById("update").value = update;        
    }    
    function toggleBar() {
        var cbar = document.getElementById("cbar").value;        
        var hue = document.getElementById("hue").value.trim();
        var plot = document.getElementById("plot").value;
        var singles = document.getElementById("singles").value;
        var sdcap = document.getElementById("sdcap").value;
        var sdfloor = document.getElementById("sdfloor").value;
        if (cbar == "Y"){
            cbar = "N";
        }else{
            cbar = "Y";
        }                
        document.getElementById("cbar").value = cbar;
        makePlots(sdfloor, sdcap, cbar == "Y", hue, plot, singles == "expanded");
    }
    function toggleHue() {
        var cbar = document.getElementById("cbar").value;
        var hue = document.getElementById("hue").value.trim();
        var plot = document.getElementById("plot").value;
        var singles = document.getElementById("singles").value;
        var sdcap = document.getElementById("sdcap").value;
        var sdfloor = document.getElementById("sdfloor").value;
        if (hue == "Best"){
            hue = "RedBlueGrey";
        } else if (hue == "RedBlueGrey") {
            hue = "BlackWhite";
        } else if (hue == "BlackWhite") {
            hue = "RedBlue";
        } else {
            hue = "Best";
        }
        document.getElementById("hue").value = hue;
        makePlots(sdfloor, sdcap, cbar == "Y", hue, plot, singles == "expanded");
    }
    function togglePlot() {
        var cbar = document.getElementById("cbar").value;
        var hue = document.getElementById("hue").value.trim();
        var plot = document.getElementById("plot").value;
        var singles = document.getElementById("singles").value;
        var sdcap = document.getElementById("sdcap").value;
        var sdfloor = document.getElementById("sdfloor").value;
        if (plot == "heatmap") {
            plot = "contour";       
        } else {
            plot = "heatmap";
        }
        document.getElementById("plot").value = plot;
        makePlots(sdfloor, sdcap, cbar == "Y", hue, plot, singles == "expanded");
    }
    function toggleSingles() {
        var cbar = document.getElementById("cbar").value;
        var hue = document.getElementById("hue").value.trim();
        var plot = document.getElementById("plot").value;
        var singles = document.getElementById("singles").value;
        var sdcap = document.getElementById("sdcap").value;
        var sdfloor = document.getElementById("sdfloor").value;
        if (singles == "collapsed") {
            singles = "expanded";
        } else {
            singles = "collapsed";
        }
        document.getElementById("singles").value = singles;
        makePlots(sdfloor, sdcap, cbar == "Y", hue, plot, singles == "expanded");
    }
</script>
<script>
    var sliderMax = document.getElementById("rangeValueMax");
    var outputMax = document.getElementById("sdcap");        
    
    sliderMax.oninput = function () {
        outputMax.value = this.value;
        var sdcap = outputMax.value;
        document.getElementById("sdcap").value = outputMax.value;                
        var cbar = document.getElementById("cbar").value;
        var hue = document.getElementById("hue").value.trim();
        var plot = document.getElementById("plot").value;
        var singles = document.getElementById("singles").value;
        var sdfloor = document.getElementById("sdfloor").value;
        makePlots(sdfloor, sdcap, cbar == "Y", hue, plot, singles == "expanded");
    }

    var sliderMin = document.getElementById("rangeValueMin");
    var outputMin = document.getElementById("sdfloor");        
    
    sliderMin.oninput = function () {
        outputMin.value = this.value;
        var sdfloor = outputMin.value;
        document.getElementById("sdfloor").value = outputMin.value;
        var cbar = document.getElementById("cbar").value;
        var hue = document.getElementById("hue").value.trim();
        var plot = document.getElementById("plot").value;
        var singles = document.getElementById("singles").value;
        var sdcap = document.getElementById("sdcap").value;
        makePlots(sdfloor, sdcap, cbar == "Y", hue, plot, singles == "expanded");
    }
</script>
<script>
    makePlots(-1, -1, false,"Best","heatmap",false)    
    document.getElementById("con").checked = false;
    document.getElementById("coff").checked = true;
    document.getElementById("cheat").checked = true;
    document.getElementById("ccon").checked = false;
    document.getElementById("rb").checked = true;
    document.getElementById("bw").checked = false;
</script>



@{
    ViewData["Title"] = "Matrix";
    Layout = "~/Views/Shared/_LayoutDensity.cshtml";
}
<div class="subheader">
    <span>
        @Html.ActionLink(linkText: "Choose",actionName: "Browse",controllerName: "Matrix",routeValues: new {pdbcode = ViewBag.PdbCode,},htmlAttributes: new { @class = "sub-header" })
        @Html.ActionLink(linkText: "Slice",actionName: "Slice",controllerName: "Matrix",routeValues: new {pdbcode = ViewBag.PdbCode,},htmlAttributes: new { @class = "sub-header" })
        @Html.ActionLink(linkText: "Plane",actionName: "Plane",controllerName: "Matrix",routeValues: new {pdbcode = ViewBag.PdbCode,},htmlAttributes: new { @class = "sub-header" })
        @Html.ActionLink(linkText: "Projection",actionName: "Projection",controllerName: "Matrix",routeValues: new {pdbcode = ViewBag.PdbCode,},htmlAttributes: new { @class = "sub-header" })
    </span>
</div>
<h3>Raw Density Matrix - @ViewBag.PdbCode</h3>
<hr />
<div>
<h5>Interactive matrix explorer - planes</h5>

    @using (Html.BeginForm("Projection", "Matrix", FormMethod.Post))
    {
        <table cellpadding="0" cellspacing="0"><!-- style="background-color:PowderBlue">-->
            <tr style="height:25%">
                <th colspan="1" align="center">Layer</th>
                <th>Click to choose plane</th>
                <th>Click to increment layer</th>
            </tr>            
            <tr style="height:25%">                
                <td>
                    <input type="text" id="layer" name="layer" align="center" value=@ViewBag.Layer>
                </td>
                <td>
                                @Html.ActionLink(
                            linkText: "XY Plane",
                            actionName: "Projection",
                            controllerName: "Matrix",
                            routeValues: new {
                            pdbcode = @ViewBag.PdbCode,
                            plane = "XY",
                            layer = @ViewBag.Layer
                            },
                            htmlAttributes: null
                            )
                                <span> ~ </span>
                                @Html.ActionLink(
                            linkText: "YZ Plane",
                actionName: "Projection",
                controllerName: "Matrix",
                            routeValues: new {
                            pdbcode = @ViewBag.PdbCode,
                            plane = "YZ",
                            layer = @ViewBag.Layer
                            },
                            htmlAttributes: null
                            )
                                <span> ~ </span>
                                @Html.ActionLink(
                            linkText: "ZX Plane",
                actionName: "Projection",
                controllerName: "Matrix",
                            routeValues: new {
                            pdbcode = @ViewBag.PdbCode,
                            plane = "ZX",
                            layer = @ViewBag.Layer
                            },
                            htmlAttributes: null
                            )
                </td>
                <td>
                                @Html.ActionLink(
                            linkText: " - 1",
                            actionName: "Projection",
                            controllerName: "Matrix",
                            routeValues: new {
                            pdbcode = @ViewBag.PdbCode,
                            plane = @ViewBag.Plane,
                            layer = @ViewBag.Layer - 1
                            },
                            htmlAttributes: null
                            )
                                <span> ~ </span>
                                @Html.ActionLink(
                            linkText: " + 1",
                actionName: "Projection",
                            controllerName: "Matrix",
                            routeValues: new {
                            pdbcode = @ViewBag.PdbCode,
                            plane = @ViewBag.Plane,
                            layer = @ViewBag.Layer + 1
                            },
                            htmlAttributes: null
                            )
                </td>
            </tr>            
            <tr><!-- style="height:25%;background-color:Crimson;">-->
                <th>
                    <input type="submit" value="Jump to"/><br/>
                    <input style="visibility:hidden;height:0px;width:0px;margin:0px;padding:0px;display:none" type="text" id="pdbcode" name="pdbcode" value=@ViewBag.PdbCode>
                    </th>
                <td>Chosen plane= @ViewBag.Plane</td>
                <td>Chosen layer= @ViewBag.Layer / @ViewBag.LayerMax</td>
            </tr>
        </table>
    }
    
</div>
<br/>


<table>
    <tr>
        <th>XY Plane</th>
        <th>YZ Plane</th>
        <th>ZX Plane</th>
    </tr>
    <tr>
        <td style="width: 450px;">            
            <div id="myCountourXY" style="width:100%"></div>            
        </td>
        <td style="width: 450px;">            
            <div id="myCountourYZ" style="width:100%"></div>            
        </td>
        <td style="width: 450px;">            
            <div id="myCountourZX" style="width:100%"></div>            
        </td>                
    </tr>  
    <tr>
        <td style="width: 450px;">
            <div id="myScatterXY" style="width:100%"></div>
        </td>
        <td style="width: 450px;">
            <div id="myScatterYZ" style="width:100%"></div>
        </td>
        <td style="width: 450px;">
            <div id="myScatterZX" style="width:100%"></div>
        </td>
    </tr>
        
        
</table>

    <!--<div>
        <div id="myCountour" style="width:40%"></div>
    <hr/>
        <div id="myDiv" style="width:40%"></div>
    </div>
    -->

<div>
    </p>@ViewBag.Error<p>
</div>
<script>
    //heatmap for crystal projection
    var jSideX = @Html.Raw(Json.Serialize(@ViewBag.SideX));
    var jSideY = @Html.Raw(Json.Serialize(@ViewBag.SideY));
    var jSideZ = @Html.Raw(Json.Serialize(@ViewBag.SideZ));    
    var jMatXY = @Html.Raw(Json.Serialize(@ViewBag.MatXY));
    var jMatYZ = @Html.Raw(Json.Serialize(@ViewBag.MatYZ));
    var jMatZX = @Html.Raw(Json.Serialize(@ViewBag.MatZX));
    // atoms for scatter projection
    var ScatXY_X = @Html.Raw(Json.Serialize(@ViewBag.ScatXY_X));
    var ScatXY_Y = @Html.Raw(Json.Serialize(@ViewBag.ScatXY_Y));
    var ScatXY_V = @Html.Raw(Json.Serialize(@ViewBag.ScatXY_V));
    var ScatYZ_X = @Html.Raw(Json.Serialize(@ViewBag.ScatYZ_X));
    var ScatYZ_Y = @Html.Raw(Json.Serialize(@ViewBag.ScatYZ_Y));
    var ScatYZ_V = @Html.Raw(Json.Serialize(@ViewBag.ScatYZ_V));
    var ScatZX_X = @Html.Raw(Json.Serialize(@ViewBag.ScatZX_X));
    var ScatZX_Y = @Html.Raw(Json.Serialize(@ViewBag.ScatZX_Y));
    var ScatZX_V = @Html.Raw(Json.Serialize(@ViewBag.ScatZX_V));
    
    var minv = @Html.Raw(Json.Serialize(@ViewBag.MinV));    
    var maxv = @Html.Raw(Json.Serialize(@ViewBag.MaxV));  

    var size = (maxv - minv) / 10
    var zero_frac = 0.001
    zero_frac = (0 - minv) / (maxv - minv)
        
    col_bar = {
        title: "",
        thickness: 15,
        len: 0.85,
        x: +.95
    }

    if (minv < 0) {
        cs_scl = [[0, 'Snow'], [zero_frac, 'AliceBlue'], [zero_frac + 0.01, 'LightBlue'], [zero_frac + 0.2, 'CornflowerBlue'], [0.8, 'Crimson'], [1, 'rgb(100, 0, 0)']];
    }else{
        cs_scl = [[0, 'AliceBlue'], [0.01, 'LightBlue'], [0.2, 'CornflowerBlue'], [0.8, 'Crimson'], [1, 'rgb(100, 0, 0)']];
    }

    
    // make the crystal heatmaps
    
    var dataXY = [{x: jSideX, y: jSideY, z: jMatXY, type: 'heatmap',  colorscale: cs_scl, 
                    line: { width: 0.5, color: 'Gray' },
        showscale: false,
        colorbar: col_bar, 
        name: "XY",
        zmin: minv,
        zmax: maxv,
                    }];
    
    var dataYZ = [{x: jSideY, y: jSideZ, z: jMatYZ, type: 'heatmap',  colorscale: cs_scl, 
                    line: { width: 0.5, color: 'Gray' },
        showscale: false, colorbar: col_bar, name: "YZ",
        zmin: minv,
                    zmax: maxv,
                    }];
    
    var dataZX = [{ x: jSideZ, y: jSideX, z: jMatZX, type: 'heatmap', colorscale: cs_scl, 
                    line: { width: 0.5, color: 'Gray' },
        showscale: false, colorbar: col_bar, name: "ZX",
                    zmin: minv,
                    zmax: maxv,
                    }];
    
    var layout = {
        grid: { rows: 1, columns: 1, pattern: 'independent' },
        autosize: true,
        title: '',
        showlegend: false,
        xaxis: {showgrid: false,zeroline: false,visible: false,},        
        yaxis: {scaleanchor: 'x',scaleratio: 1,visible: false,},      
        margin: {l: 20,r: 80,b: 20,t: 20,pad: 4},
    };

    Plotly.newPlot('myCountourXY', dataXY, layout);
    Plotly.newPlot('myCountourYZ', dataYZ, layout);
    Plotly.newPlot('myCountourZX', dataZX, layout);


    // make the atom projections
    var traceXY = {
        x: ScatXY_X,
        y: ScatXY_Y,
        mode: 'markers',
        marker: {
            colorscale: cs_scl,
            color: ScatXY_V,
            size: 5,
            showscale: false,
            colorbar: col_bar,
        },
    };    
    var traceYZ = {
        x: ScatYZ_X,
        y: ScatYZ_Y,
        mode: 'markers',
        marker: {
            colorscale: cs_scl,
            color: ScatYZ_V,
            size: 5,
            showscale: false,        
            colorbar: col_bar,
        },
        
    };
    var traceZX = {
        x: ScatZX_X,
        y: ScatZX_Y,
        mode: 'markers',
        marker: {
            colorscale: cs_scl,
            color: ScatZX_V,
            size: 5,
            showscale: false,        
            colorbar: col_bar,
        },
    };
    Plotly.newPlot('myScatterXY', [traceXY], {});
    Plotly.newPlot('myScatterYZ', [traceYZ], {});
    Plotly.newPlot('myScatterZX', [traceZX], {});
    
           
</script>

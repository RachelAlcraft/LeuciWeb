@{
    ViewData["Title"] = "Slice";
    Layout = "~/Views/Shared/_LayoutDensity.cshtml";
}
<h3>Slice though Density Matrix - @ViewBag.PdbCode</h3>
<hr />
<div>                
    @using (Html.BeginForm("Slice", "Matrix", FormMethod.Post))
    {
        <table cellpadding="0" cellspacing="0" style="width:100%;table-layout: fixed;">
            <tr>
                <th style="width:6%;" colspan="1" align="center">                  
                  <input type="submit" value="Submit" />
                </th>
                <th style="width:8%;" colspan="1" align="center">Atom</th>
                <th style="width:15%;" colspan="1" align="center">(x,y,z)</th>
                <th style="width:6%;" colspan="1" align="center">distance</th>
                <th style="width:30%;" colspan="1" align="center">Controls</th>
                <th style="width:35%;" colspan="1" align="center">Navigation</th>
            </tr>                        
            <tr>
                <td>central</td>
                <td><input style="color:@ViewBag.CColor" type="text" id="ca" name="ca" value=@ViewBag.cAtom></td>
                <td><input style=";" type="text" id="c_xyz" name="c_xyz" value=@ViewBag.cXYZ></td>
                <td><div id="cdistance">@ViewBag.CDistance</div></td>                
                <td rowspan="3" style="height:30px;text-align:justify">    
                    <div class="inner-tbl">
                <table>
                    <tr>
                        <td>
                            Width(Å)=
                        </td>
                        <td>
                            <input style="width:80px;" type="text" id="width" name="width" value=@ViewBag.Width>                        
                        </td>
                        <td>
                               [
                    @Html.ActionLink(
                    linkText: "+0.5",
                    actionName: "Slice",
                    controllerName: "Matrix",
                    routeValues: new {
                    width = "-2",
                    },
                    htmlAttributes: null
                    )
                    ,
                    @Html.ActionLink(
                    linkText: "-0.5",
                    actionName: "Slice",
                    controllerName: "Matrix",
                    routeValues: new {
                    width = "-3",
                    },
                    htmlAttributes: null
                    )
                    ]
                        </td>
                    </tr>
                    <tr>
                        <td>
                            Gap(Å)  =
                        </td>
                        <td>
                            <input style="width:80px;" type="text" id="gap" name="gap" value=@ViewBag.Gap>                        
                        </td>
                        <td>
                            [
                    @Html.ActionLink(
                    linkText: "+0.01",
                    actionName: "Slice",
                    controllerName: "Matrix",
                    routeValues: new {
                    gap = "-2",
                    },
                    htmlAttributes: null
                    )
                    ,
                    @Html.ActionLink(
                    linkText: "-0.01",
                    actionName: "Slice",
                    controllerName: "Matrix",
                    routeValues: new {
                    gap = "-3",
                    },
                    htmlAttributes: null
                    )
                    ]
                        </td>

                    </tr>
                    <tr>
                        <td>
                            Interpolation=
                        </td>
                        <td>
                            @ViewBag.Interp 
                        </td>
                        <td>
                            [@Html.ActionLink(
                        linkText: "Tgl Interp",
                        actionName: "Slice",
                        controllerName: "Matrix",
                        routeValues: new {
                        interp = "+1",
                        },
                        htmlAttributes: null
                        )]
                        </td>

                    </tr>                    

                </table>     
                    </div>
                    <!--<input type="image" src="~/images/calc.png" style="width:18px;height:18px;vertical-align:text-bottom" />-->
               </td>
                <td rowspan="3" style="height:30px;text-align:justify">
                    <table>
                        <tr>
                            <td></td>
                        </tr>
                    </table>
                        
            </tr>
            <tr>
                <td>linear</td>
                <td><input style="color:@ViewBag.LColor;" type="text" id="la" name="la" value=@ViewBag.lAtom></td>
                <td><input style="" type="text" id="l_xyz" name="l_xyz" value=@ViewBag.lXYZ></td>
                <td>@ViewBag.LDistance</td>
            </tr>
            <tr>
                <td>planar</td>
                <td><input style="color:@ViewBag.PColor;" type="text" id="pa" name="pa" value=@ViewBag.pAtom></td>
                <td><input style="" type="text" id="p_xyz" name="p_xyz" value=@ViewBag.pXYZ></td>
                <td>@ViewBag.PDistance</td>
            </tr>                                                                        
        </table>        
    }
      
</div>
<a href=@ViewBag.BrowseAtoms target="_blank">Browse atoms</a>
<br />

<hr />
<div>
    <table>
    <tr>
            <td style="width: 450px;">
                Density - @ViewBag.DenPlot
                <div id="myCountour"></div>
                [
                @Html.ActionLink(
                linkText: "Toggle Plot",
                actionName: "Slice",
                controllerName: "Matrix",
                routeValues: new {
                denplot = "+1",
                },
                htmlAttributes: null
                )
                ] [                
                @Html.ActionLink(
                linkText: "Toggle Hue",
                actionName: "Slice",
                controllerName: "Matrix",
                routeValues: new {
                denhue = "+1",
                },
                htmlAttributes: null
                )
                ] [
                @Html.ActionLink(
                linkText: "Toggle Bar",
                actionName: "Slice",
                controllerName: "Matrix",
                routeValues: new {
                denbar = "+1",
                },
                htmlAttributes: null
                )
                ]
            </td>            
            <td style="width: 450px;">
                Radient - @ViewBag.RadPlot
                <div id="myCountourRad"></div>
                [
                @Html.ActionLink(
                linkText: "Toggle Plot",
                actionName: "Slice",
                controllerName: "Matrix",
                routeValues: new {
                radplot = "+1",
                },
                htmlAttributes: null
                )
                ] [
                @Html.ActionLink(
                linkText: "Toggle Hue",
                actionName: "Slice",
                controllerName: "Matrix",
                routeValues: new {
                radhue = "+1",
                },
                htmlAttributes: null
                )
                ] [
                @Html.ActionLink(
                linkText: "Toggle Bar",
                actionName: "Slice",
                controllerName: "Matrix",
                routeValues: new {
                radbar = "+1",
                },
                htmlAttributes: null
                )
                ]
            </td>
            <td style="width: 450px;">
                Laplacian - @ViewBag.LapPlot
                <div id="myCountourLap"></div>                
                [
                @Html.ActionLink(
                linkText: "Toggle Plot",
                actionName: "Slice",
                controllerName: "Matrix",
                routeValues: new {
                lapplot = "+1",
                },
                htmlAttributes: null
                )
                ] [
                @Html.ActionLink(
                linkText: "Toggle Hue",
                actionName: "Slice",
                controllerName: "Matrix",
                routeValues: new {
                laphue = "+1",
                },
                htmlAttributes: null
                )
                ] [
                @Html.ActionLink(
                linkText: "Toggle Bar",
                actionName: "Slice",
                controllerName: "Matrix",
                routeValues: new {
                lapbar = "+1",
                },
                htmlAttributes: null
                )
                ]
                </td>        
    </tr>
    </table>
</div>
<hr />

<script>
    var jx = @Html.Raw(Json.Serialize(@ViewBag.SliceAxis));
    var jy = @Html.Raw(Json.Serialize(@ViewBag.SliceAxis));    
    var jv = @Html.Raw(Json.Serialize(@ViewBag.SliceDensity));
    var jv2 = @Html.Raw(Json.Serialize(@ViewBag.Slice2Density));
    var jvr = @Html.Raw(Json.Serialize(@ViewBag.SliceRadient));
    var jvl = @Html.Raw(Json.Serialize(@ViewBag.SliceLaplacian));
    var minv = -2
    var maxv = 10    
    var minl = @Html.Raw(Json.Serialize(@ViewBag.LMin));
    var maxl = @Html.Raw(Json.Serialize(@ViewBag.LMax));
    
    var dhue = @Html.Raw(Json.Serialize(@ViewBag.DenHue));
    var rhue = @Html.Raw(Json.Serialize(@ViewBag.RadHue));
    var lhue = @Html.Raw(Json.Serialize(@ViewBag.LapHue));

    var dbar = @Html.Raw(Json.Serialize(@ViewBag.DenBar));
    var rbar = @Html.Raw(Json.Serialize(@ViewBag.RadBar));
    var lbar = @Html.Raw(Json.Serialize(@ViewBag.LapBar));

    var minc = -1
    var maxc = 5
    var size = (maxc - minc) / 10
    var zero_frac = 0.001
    var zero_frac_lap = 0.001
    var cs = []
    
    zero_frac = (0 - minc) / (maxc - minc)
    var lev1 = zero_frac + 0.1 * (1 - zero_frac)
    var lev2 = zero_frac + 0.3 * (1 - zero_frac)
    var lev3 = zero_frac + 0.5 * (1 - zero_frac)
    if (dhue == "RedBlueGrey"){
        cs = [[0, 'DimGray'], [String(zero_frac + 0.001), 'AliceBlue'], [String(lev1), 'LightBlue'], [String(lev2), 'CornflowerBlue'], [String(lev3), 'Crimson'], [1, 'rgb(100, 0, 0)']]        
    }
    else if (dhue == "BlackWhite") {
        cs = [[0, 'Snow'], [1, 'Black']]
    }
    else{
        cs = [[0, 'CornflowerBlue'], [String(zero_frac), 'Snow'], [1, 'Crimson']]
    }
         
    zero_frac_lap = (0 - minl) / (maxl - minl)  
    var lev1 = zero_frac + 0.1 * (1 - zero_frac)
    var lev2 = zero_frac + 0.3 * (1 - zero_frac)
    var lev3 = zero_frac + 0.5 * (1 - zero_frac)
    if (lhue == "RedBlueGrey") {
        cs_lap = [[0, 'DimGray'], [String(zero_frac_lap + 0.001), 'AliceBlue'], [String(lev1), 'LightBlue'], [String(lev2), 'CornflowerBlue'], [String(lev3), 'Crimson'], [1, 'rgb(100, 0, 0)']]
    }
    else if (lhue == "BlackWhite") {
        cs_lap = [[0, 'Snow'], [1, 'Black']]
    }
    else {
        cs_lap = [[0, 'CornflowerBlue'], [String(zero_frac_lap), 'AliceBlue'], [String(lev2), 'Snow'], [1, 'Crimson']]
    }
      
   if (rhue == "RedBlueGrey") {
        cs_rad = [[0, 'DimGray'], [String(0.001), 'AliceBlue'], [String(lev1), 'LightBlue'], [String(lev2), 'CornflowerBlue'], [String(lev3), 'Crimson'], [1, 'rgb(100, 0, 0)']]
   }
    else if (rhue == "BlackWhite") {
        cs_rad = [[0, 'Black'], [1, 'Snow']]
   }
   else {
        cs_rad = [[0, 'CornflowerBlue'], [String(0.5), 'Snow'], [1, 'Crimson']]
   }

   var denplot = @Html.Raw(Json.Serialize(@ViewBag.DenPlot));
   var radplot = @Html.Raw(Json.Serialize(@ViewBag.RadPlot));
   var lapplot = @Html.Raw(Json.Serialize(@ViewBag.LapPlot));
   



    var data = [{
        z: jv,
        x: jx,
        y: jy,
        type: denplot,
        colorscale: cs,
        reversescale: false,
        autocontour: false,
        line: {
            width: 0.5,
            color: 'DimGray'
        },
        contours: {
            start: minc,
            end: maxc,
            size: size
        },
        showscale:dbar,
        colorbar: {
            thickness: 15,
        }
    }];
   
    var dataR = [{
        z: jvr,
        x: jx,
        y: jy,
        type: radplot,
        colorscale: cs_rad,
        reversescale: false,
        autocontour: true,
        line: {
            width: 0,
            color: 'DimGray'
        },        
        showscale: rbar,
        colorbar: {
            thickness: 15,
        }
    }];

    var dataL = [{
        z: jvl,
        x: jx,
        y: jy,
        type: lapplot,
        colorscale: cs_lap,
        reversescale: true,
        autocontour: true,
        line: {
            width: 0.5,
            color: 'DimGray'
        },        
        showscale: lbar,
        colorbar: {
            thickness: 15,
        }
    }];
    
    var layout = {
        grid: { rows: 1, columns: 1, pattern: 'independent' },
        autosize: true,
        title: '',
        showlegend: false,        
        xaxis: {
            showgrid: false,
            zeroline: false,
            visible: false,
        },
        yaxis: {
            scaleanchor: 'x',
            scaleratio: 1,
            visible: false,
        },
        margin: {
            l: 50,
            r: 50,
            b: 100,
            t: 100,
            pad: 4
        }
    };

    var config = { responsive: true }

    Plotly.newPlot('myCountour', data, layout, config);    
    Plotly.newPlot('myCountourRad', dataR, layout, config);
    Plotly.newPlot('myCountourLap', dataL, layout, config);
    
</script>

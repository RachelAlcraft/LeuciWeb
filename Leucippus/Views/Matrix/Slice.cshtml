@{
    ViewData["Title"] = "Slice";
    Layout = "~/Views/Shared/_LayoutDensity.cshtml";
}

<h1>Slice though Density Matrix - @ViewBag.PdbCode</h1>
<hr />
<div>                
    @using (Html.BeginForm("Slice", "Matrix", FormMethod.Post))
    {
        <table cellpadding="0" cellspacing="0" style="width:700px;table-layout: fixed;">
            <tr>
                <th style="width:100px;" colspan="1" align="center"><input type="submit" value="Submit" /></th>
                <th style="width:100px;" colspan="1" align="center">Atom</th>
                <th style="width:100px;" colspan="1" align="center">(x,y,z)</th>
                <th style="width:100px;" colspan="1" align="center">Z</th>
                <th style="width:300px;" colspan="1" align="center">Controls</th>
            </tr>                        
            <tr>
                <td>central</td>
                <td><input style="width:80px;" type="text" id="cx" name="cx" value=@ViewBag.cx></td>
                <td><input style="width:80px;" type="text" id="cy" name="cy" value=@ViewBag.cy></td>
                <td><input style="width:80px;" type="text" id="cz" name="cz" value=@ViewBag.cz></td>
                <td rowspan="3" style="height:30px;text-align:justify"/>
                @using (Html.BeginForm("Slice", "Matrix", FormMethod.Post))
                {
                    <span>
                        Width(Å)=
                    <input style="width:60px;" type="text" id="width" name="width" value=@ViewBag.Width>                        
                    <input type="image" src="~/images/calc.png" style="height:18px;vertical-align:text-bottom" />
                        [
                    @Html.ActionLink(
                    linkText: "+0.5",
                    actionName: "Slice",
                    controllerName: "Matrix",
                    routeValues: new {
                    width = "-2",
                    },
                    htmlAttributes: null
                    )
                    ,
                    @Html.ActionLink(
                    linkText: "-0.5",
                    actionName: "Slice",
                    controllerName: "Matrix",
                    routeValues: new {
                    width = "-3",
                    },
                    htmlAttributes: null
                    )
                    ]<br/>
                    </span>
                    <span>
                        Gap (Å)  =
                    <input style="width:60px;" type="text" id="gap" name="gap" value=@ViewBag.Gap>                        
                    <input type="image" src="~/images/calc.png" style="height:18px;vertical-align:text-bottom" />
                        [
                    @Html.ActionLink(
                    linkText: "+0.01",
                    actionName: "Slice",
                    controllerName: "Matrix",
                    routeValues: new {
                    gap = "-2",
                    },
                    htmlAttributes: null
                    )
                    ,
                    @Html.ActionLink(
                    linkText: "-0.01",
                    actionName: "Slice",
                    controllerName: "Matrix",
                    routeValues: new {
                    gap = "-3",
                    },
                    htmlAttributes: null
                    )
                    ]
                    </span>                                                                                
                }
            </tr>
            <tr>
                <td>linear</td>
                <td><input style="width:80px;" type="text" id="lx" name="lx" value=@ViewBag.lx></td>
                <td><input style="width:80px;" type="text" id="ly" name="ly" value=@ViewBag.ly></td>
                <td><input style="width:80px;" type="text" id="lz" name="lz" value=@ViewBag.lz></td>                
            </tr>
            <tr>
                <td>planar</td>
                <td><input style="width:80px;" type="text" id="px" name="px" value=@ViewBag.px></td>
                <td><input style="width:80px;" type="text" id="py" name="py" value=@ViewBag.py></td>
                <td><input style="width:80px;" type="text" id="pz" name="pz" value=@ViewBag.pz></td>
            </tr>                                                                        
        </table>
    }            

</div>
<br />

<hr />
<div>
    <table>
    <tr>
            <td style="width: 450px;">Density
                <br /><div id="myCountour"></div>
                <br />
                @Html.ActionLink(
                linkText: "Toggle Plot",
                actionName: "Slice",
                controllerName: "Matrix",
                routeValues: new {
                denplot = "+1",
                },
                htmlAttributes: null
                )                        
            </td>            
            <td style="width: 450px;">Radiant
                <br/><div id="myCountourRad"></div>
                <br />
                @Html.ActionLink(
                linkText: "Toggle Plot",
                actionName: "Slice",
                controllerName: "Matrix",
                routeValues: new {
                radplot = "+1",
                },
                htmlAttributes: null
                )
            </td>
            <td style="width: 450px;">Laplacian
                <br/><div id="myCountourLap"></div>
                <br />
                @Html.ActionLink(
                linkText: "Toggle Plot",
                actionName: "Slice",
                controllerName: "Matrix",
                routeValues: new {
                lapplot = "+1",
                },
                htmlAttributes: null
                )
                </td>        
    </tr>
    </table>
</div>
<hr />

<script>
    var jx = @Html.Raw(Json.Serialize(@ViewBag.SliceAxis));
    var jy = @Html.Raw(Json.Serialize(@ViewBag.SliceAxis));    
    var jv = @Html.Raw(Json.Serialize(@ViewBag.SliceDensity));
    var jv2 = @Html.Raw(Json.Serialize(@ViewBag.Slice2Density));
    var jvr = @Html.Raw(Json.Serialize(@ViewBag.SliceRadiant));
    var jvl = @Html.Raw(Json.Serialize(@ViewBag.SliceLaplacian));
    var minv = -2
    var maxv = 10    
    var minl = @Html.Raw(Json.Serialize(@ViewBag.MinLaplacian));
    var maxl = @Html.Raw(Json.Serialize(@ViewBag.MaxLaplacian));
    var minc = -1
    var maxc = 5
    var size = (maxc - minc) / 20
    var zero_frac = 0.001
    var zero_frac_lap = 0.001
    var cs = []
    if (minc < 0) {
        zero_frac = (0 - minc) / (maxc - minc)
        var lev1 = zero_frac + 0.1 * (1 - zero_frac)
        var lev2 = zero_frac + 0.3 * (1 - zero_frac)
        var lev3 = zero_frac + 0.5 * (1 - zero_frac)
        cs = [[0, 'DimGray'], [String(zero_frac + 0.001), 'AliceBlue'], [String(lev1), 'LightBlue'], [String(lev2), 'CornflowerBlue'], [String(lev3), 'Crimson'], [1, 'rgb(100, 0, 0)']]        
   }
    else {
        cs = [[0, 'AliceBlue'], [0.25, 'LightBlue'], [0.5, 'CornflowerBlue'], [0.75, 'Crimson'], [1, 'rgb(100, 0, 0)']]
    }
    <!--cs = [[0, 'AliceBlue'], [0.25, 'LightBlue'], [0.5, 'CornflowerBlue'], [0.75, 'Crimson'], [1, 'rgb(100, 0, 0)']]-->

    if (minl < 0){
        zero_frac_lap = (0 - minl) / (maxl - minl)        
        cs_lap = [[0, 'CornflowerBlue'], [String(zero_frac_lap), 'Snow'], [1, 'Crimson']]
   }
   else{
        cs_lap = [[0, 'CornflowerBlue'], [0.5, 'Snow'], [1, 'Crimson']]

   }

   var denplot = @Html.Raw(Json.Serialize(@ViewBag.DenPlot));
   var radplot = @Html.Raw(Json.Serialize(@ViewBag.RadPlot));
   var lapplot = @Html.Raw(Json.Serialize(@ViewBag.LapPlot));
   



    var data = [{
        z: jv,
        x: jx,
        y: jy,
        type: denplot,
        colorscale: cs,
        reversescale: false,
        autocontour: false,
        line: {
            width: 0.5,
            color: 'DimGray'
        },
        contours: {
            start: minc,
            end: maxc,
            size: size
        },
        showscale:false,
        colorbar: {
            thickness: 15,
        }
    }];
   
    var dataR = [{
        z: jvr,
        x: jx,
        y: jy,
        type: radplot,
        colorscale: 'Greys',
        reversescale: false,
        autocontour: true,
        line: {
            width: 0,
            color: 'DimGray'
        },        
        showscale: false,
        colorbar: {
            thickness: 15,
        }
    }];

    var dataL = [{
        z: jvl,
        x: jx,
        y: jy,
        type: lapplot,
        colorscale: cs_lap,
        reversescale: true,
        autocontour: true,
        line: {
            width: 0.5,
            color: 'DimGray'
        },        
        showscale: false,
        colorbar: {
            thickness: 15,
        }
    }];
    
    var layout = {
        grid: { rows: 1, columns: 1, pattern: 'independent' },
        autosize: true,
        title: '',
        showlegend: false,        
        xaxis: {
            showgrid: false,
            zeroline: false,
            visible: false,
        },
        yaxis: {
            scaleanchor: 'x',
            scaleratio: 1,
            visible: false,
        },
        margin: {
            l: 50,
            r: 50,
            b: 100,
            t: 100,
            pad: 4
        }
    };

    var config = { responsive: true }

    Plotly.newPlot('myCountour', data, layout, config);    
    Plotly.newPlot('myCountourRad', dataR, layout, config);
    Plotly.newPlot('myCountourLap', dataL, layout, config);
    
</script>
